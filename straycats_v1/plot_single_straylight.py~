#!/disk/lif2/bwgref/conda3/envs/nustar/bin/python

import sys

from astropy.io.fits import getdata, getheader
import numpy as np
import glob
import os

 
import astropy.units as u
from datetime import datetime

from nustar_gen import info, utils

import matplotlib
matplotlib.use('tkagg')

import matplotlib.pyplot as plt
plt.ioff()

#print(f'Number of arguments: {len(sys.argv)} arguments.')
#print('Argument List:', str(sys.argv))

assert len(sys.argv) == 2, 'Syntax ./plot_single_straylight.py SEQID'
inseq = sys.argv[1]

ns = info.NuSTAR()
limit = 3*u.arcmin
limit_pix = (limit / ns.pixel).cgs

ns = info.NuSTAR()
day0 = ns.launch


indir = '/home/nustar1/nustarops/fltops/'

socdirs = glob.glob(f'{indir}*')
low_pi = utils.energy_to_chan(3)
high_pi = utils.energy_to_chan(20)


with open('observing_schedule.txt') as f:
    for line in f:
        if line.startswith(';'):
            continue
        fields = line.split()
        
        seqid = fields[2]
        ss = seqid[0:8]
        socn = fields[3]

        if (int(seqid) == int(inseq)):
            
            socd = f'{indir}/{ss}_{socn}/{seqid}/'
            print(socd)
            fig, ax = plt.subplots(ncols=2, figsize=(6, 2.5))
            for ind, mod in enumerate(['A', 'B']):

                
                evf = f'{socd}/event_cl/nu{seqid}{mod}01_cl.evt'
                if not os.path.isfile(evf):
                    continue
                sky2det = f'{socd}/event_cl//nu{seqid}_sky2det{mod}.fits'
                if not os.path.isfile(sky2det):
                    continue
                print(f'Processing {mod}')
                ev, hdr = getdata(evf, header=True)
                src = getdata(sky2det)
            
                xr = np.interp(ev['TIME'], src['TIME'], src['DET1X'])
                yr = np.interp(ev['TIME'], src['TIME'], src['DET1Y'])
                dr = np.sqrt((ev['DET1X'] - xr)**2 + (ev['DET1Y'] - yr)**2)

                filt = np.where( (dr > limit_pix) &
                                 (ev['PI'] > low_pi) &
                                 (ev['PI'] < high_pi))
                src_filt = np.where( (dr < limit_pix) &
                                 (ev['PI'] > low_pi) &
                                 (ev['PI'] < high_pi) )

                ax[ind].hist2d(ev['DET1X'][filt], ev['DET1Y'][filt], bins = 34, range =( (0,375), (0, 375)) )
            plt.savefig(f'{seqid}.pdf')
#            plt.show()
            break
                
#                 bgd_hist, edges = np.histogram(ev['DET_ID'][filt], bins = 4)
#                 bgd_rate = [x / hdr['EXPOSURE'] for x in bgd_hist]
#                 src_rate = len(src_filt[0]) / hdr['EXPOSURE']
#                 out_string = f'{seqid} {mod} {src_rate} '
#                 for x in bgd_rate:
#                     out_string = f"{out_string} {x}"
#                 out_string += '\n'
#                 f2.write(out_string)
# 
# # 
#
#         if ( len(stray_light['data']) - last_write) > 100:
#             print(len(stray_light['data']))
#             print('Dumping data')
#             last_write=len(stray_light['data'])
#             with open(outfile, 'wb') as f:
#                 pickle.dump(stray_light, f)
# 
# print('Dumping data')
# last_write=len(stray_light)
# with open(outfile, 'wb') as f:
#     pickle.dump(stray_light, f)
